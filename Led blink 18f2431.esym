D G "__PCH__" 0 18 ""5.015""
D G "__DEVICE__" 0 18 "2431"
D G "__DATE__" 0 18 ""09-Mar-20""
D G "__TIME__" 0 18 ""11:53:50"" "Standard Header file for the PIC18F2431 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 43 "int8" `54 
f B "set_tris_a" 2 43 "void(int8 value)" `53 
v L "value" 2 44 "int8" `56 
f B "set_tris_b" 2 44 "void(int8 value)" `55 
v L "value" 2 45 "int8" `58 
f B "set_tris_c" 2 45 "void(int8 value)" `57 
f B "get_tris_a" 2 46 "int8()" `59 
f B "get_tris_b" 2 47 "int8()" `60 
f B "get_tris_c" 2 48 "int8()" `61 
v L "value" 2 49 "int8" `63 
f B "output_a" 2 49 "void(int8 value)" `62 
v L "value" 2 50 "int8" `65 
f B "output_b" 2 50 "void(int8 value)" `64 
v L "value" 2 51 "int8" `67 
f B "output_c" 2 51 "void(int8 value)" `66 
f B "input_a" 2 52 "int8()" `68 
f B "input_b" 2 53 "int8()" `69 
f B "input_c" 2 54 "int8()" `70 
f B "input_change_a" 2 55 "int8()" `71 
f B "input_change_b" 2 56 "int8()" `72 
f B "input_change_c" 2 57 "int8()" `73 
v L "pin" 2 58 "int16" `75 
f B "input" 2 58 "int8(int16 pin)" `74 
v L "pin" 2 59 "int16" `77 
f B "input_state" 2 59 "int8(int16 pin)" `76 
v L "pin" 2 60 "int16" `79 
f B "output_low" 2 60 "void(int16 pin)" `78 
v L "pin" 2 61 "int16" `81 
f B "output_high" 2 61 "void(int16 pin)" `80 
v L "pin" 2 62 "int16" `83 
f B "output_toggle" 2 62 "void(int16 pin)" `82 
v L "pin" 2 63 "int16" `85 
v L "level" 2 63 "int8" `86 
f B "output_bit" 2 63 "void(int16 pin,int8 level)" `84 
v L "pin" 2 64 "int16" `88 
f B "output_float" 2 64 "void(int16 pin)" `87 
v L "pin" 2 65 "int16" `90 
f B "output_drive" 2 65 "void(int16 pin)" `89  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 69 "31744"
d G "PIN_A1" 2 70 "31745"
d G "PIN_A2" 2 71 "31746"
d G "PIN_A3" 2 72 "31747"
d G "PIN_A4" 2 73 "31748"
d G "PIN_A6" 2 74 "31750"
d G "PIN_A7" 2 75 "31751"
d G "PIN_B0" 2 77 "31752"
d G "PIN_B1" 2 78 "31753"
d G "PIN_B2" 2 79 "31754"
d G "PIN_B3" 2 80 "31755"
d G "PIN_B4" 2 81 "31756"
d G "PIN_B5" 2 82 "31757"
d G "PIN_B6" 2 83 "31758"
d G "PIN_B7" 2 84 "31759"
d G "PIN_C0" 2 86 "31760"
d G "PIN_C1" 2 87 "31761"
d G "PIN_C2" 2 88 "31762"
d G "PIN_C3" 2 89 "31763"
d G "PIN_C4" 2 90 "31764"
d G "PIN_C5" 2 91 "31765"
d G "PIN_C6" 2 92 "31766"
d G "PIN_C7" 2 93 "31767"
d G "FALSE" 2 96 "0"
d G "TRUE" 2 97 "1"
d G "BYTE" 2 99 "int8"
d G "BOOLEAN" 2 100 "int1"
d G "getc" 2 102 "getch"
d G "fgetc" 2 103 "getch"
d G "getchar" 2 104 "getch"
d G "putc" 2 105 "putchar"
d G "fputc" 2 106 "putchar"
d G "fgets" 2 107 "gets"
d G "fputs" 2 108 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 113 "int8()" `91 
f B "reset_cpu" 2 114 "void()" `92 
f B "sleep" 2 115 "void()" `93 
v L "type" 2 116 "int8" `95 
f G "sleep" 2 116 "void(int8 type)" `94  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_TIMEOUT" 2 118 "7"
d G "MCLR_FROM_SLEEP" 2 119 "11"
d G "MCLR_FROM_RUN" 2 120 "15"
d G "NORMAL_POWER_UP" 2 121 "12"
d G "BROWNOUT_RESTART" 2 122 "14"
d G "WDT_FROM_SLEEP" 2 123 "3"
d G "RESET_INSTRUCTION" 2 124 "0"
d G "SLEEP_FULL" 2 127 "0" "Default"
d G "SLEEP_IDLE" 2 128 "1" "Clock and peripherals don't stop"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 135 "int8" `97 
f B "setup_timer_0" 2 135 "void(int8 mode)" `96 
v L "value" 2 136 "int16" `99 
f B "set_timer0" 2 136 "void(int16 value)" `98 
f B "get_timer0" 2 137 "int16()" `100 
v L "mode" 2 138 "int8" `102 
v L "prescaler" 2 138 "int8" `103 
f B "setup_counters" 2 138 "void(int8 mode,int8 prescaler)" `101 
v L "value" 2 139 "int16" `105 
f B "set_rtcc" 2 139 "void(int16 value)" `104 
f B "get_rtcc" 2 140 "int16()" `106  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 142 "0"
d G "T0_EXT_L_TO_H" 2 143 "32"
d G "T0_EXT_H_TO_L" 2 144 "48"
d G "T0_DIV_1" 2 146 "8"
d G "T0_DIV_2" 2 147 "0"
d G "T0_DIV_4" 2 148 "1"
d G "T0_DIV_8" 2 149 "2"
d G "T0_DIV_16" 2 150 "3"
d G "T0_DIV_32" 2 151 "4"
d G "T0_DIV_64" 2 152 "5"
d G "T0_DIV_128" 2 153 "6"
d G "T0_DIV_256" 2 154 "7"
d G "T0_OFF" 2 156 "0x80"
d G "T0_8_BIT" 2 158 "0x40"
d G "RTCC_INTERNAL" 2 160 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 161 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 162 "48"
d G "RTCC_DIV_1" 2 163 "8"
d G "RTCC_DIV_2" 2 164 "0"
d G "RTCC_DIV_4" 2 165 "1"
d G "RTCC_DIV_8" 2 166 "2"
d G "RTCC_DIV_16" 2 167 "3"
d G "RTCC_DIV_32" 2 168 "4"
d G "RTCC_DIV_64" 2 169 "5"
d G "RTCC_DIV_128" 2 170 "6"
d G "RTCC_DIV_256" 2 171 "7"
d G "RTCC_OFF" 2 172 "0x80"
d G "RTCC_8_BIT" 2 173 "0x40"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 184 "int16" `108 
f B "setup_wdt" 2 184 "void(int16 mode)" `107 
f B "restart_wdt" 2 185 "void()" `109  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 2 187 "0x100"
d G "WDT_OFF" 2 188 "0"
d G "WDT_4MS" 2 190 "0x300"
d G "WDT_8MS" 2 191 "0x500"
d G "WDT_16MS" 2 192 "0x700"
d G "WDT_32MS" 2 193 "0x900"
d G "WDT_64MS" 2 194 "0xB00"
d G "WDT_128MS" 2 195 "0xD00"
d G "WDT_256MS" 2 196 "0xF00"
d G "WDT_512MS" 2 197 "0x1100"
d G "WDT_1S" 2 198 "0x1300"
d G "WDT_2S" 2 199 "0x1500"
d G "WDT_4S" 2 200 "0x1700"
d G "WDT_8S" 2 201 "0x1900"
d G "WDT_16" 2 202 "0x1B00"
d G "WDT_32S" 2 203 "0x1D00"
d G "WDT_64S" 2 204 "0x1F00"
d G "WDT_128S" 2 205 "0x2100"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 211 "int16" `111 
f B "setup_timer_1" 2 211 "void(int16 mode)" `110 
f B "get_timer1" 2 212 "int16()" `112 
v L "value" 2 213 "int16" `114 
f B "set_timer1" 2 213 "void(int16 value)" `113  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 216 "0"
d G "T1_INTERNAL" 2 217 "0x85"
d G "T1_EXTERNAL" 2 218 "0x87"
d G "T1_EXTERNAL_SYNC" 2 219 "0x83"
d G "T1_CLK_OUT" 2 221 "8"
d G "T1_DIV_BY_1" 2 223 "0"
d G "T1_DIV_BY_2" 2 224 "0x10"
d G "T1_DIV_BY_4" 2 225 "0x20"
d G "T1_DIV_BY_8" 2 226 "0x30"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 231 "int8" `116 
v L "period" 2 231 "int8" `117 
v L "postscale" 2 231 "int8" `118 
f B "setup_timer_2" 2 231 "void(int8 mode,int8 period,int8 postscale)" `115 
f B "get_timer2" 2 232 "int8()" `119 
v L "value" 2 233 "int8" `121 
f B "set_timer2" 2 233 "void(int8 value)" `120  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 235 "0"
d G "T2_DIV_BY_1" 2 236 "4"
d G "T2_DIV_BY_4" 2 237 "5"
d G "T2_DIV_BY_16" 2 238 "6"
c L "set_timer2" 2 3 3 "FUNCTION"
v L "mode" 2 243 "int8" `123 
f B "setup_timer_5" 2 243 "void(int8 mode)" `122 
f B "get_timer5" 2 244 "int16()" `124 
v L "value" 2 245 "int16" `126 
f B "set_timer5" 2 245 "void(int16 value)" `125  "Constants used for SETUP_TIMER_5() are:"
d G "T5_DISABLED" 2 248 "0"
d G "T5_INTERNAL" 2 249 "0x01"
d G "T5_EXTERNAL" 2 250 "0x07"
d G "T5_EXTERNAL_SYNC" 2 251 "0x03"
d G "T5_DIV_BY_1" 2 253 "0"
d G "T5_DIV_BY_2" 2 254 "0x08"
d G "T5_DIV_BY_4" 2 255 "0x10"
d G "T5_DIV_BY_8" 2 256 "0x18"
d G "T5_ONE_SHOT" 2 258 "0x20"
d G "T5_DISABLE_SE_RESET" 2 260 "0x40"
d G "T5_ENABLE_DURING_SLEEP" 2 262 "0x80"
c L "set_timer5" 2 3 4 "FUNCTION"
v L "mode" 2 268 "int32" `128 
f B "setup_ccp1" 2 268 "void(int32 mode)" `127 
v L "mode" 2 269 "int32" `130 
v L "pwm" 2 269 "int8" `131 
f G "setup_ccp1" 2 269 "void(int32 mode,int8 pwm)" `129 
v L "value" 2 270 "int16" `133 
f B "set_pwm1_duty" 2 270 "void(int16 value)" `132  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 272 "0"
d G "CCP_CAPTURE_FE" 2 273 "4"
d G "CCP_CAPTURE_RE" 2 274 "5"
d G "CCP_CAPTURE_DIV_4" 2 275 "6"
d G "CCP_CAPTURE_DIV_16" 2 276 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 277 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 278 "9"
d G "CCP_COMPARE_INT" 2 279 "0xA"
d G "CCP_COMPARE_INT_AND_TOGGLE" 2 280 "0x2"
d G "CCP_COMPARE_RESET_TIMER" 2 281 "0xB"
d G "CCP_PWM" 2 282 "0xC"
d G "CCP_PWM_PLUS_1" 2 283 "0x1c"
d G "CCP_PWM_PLUS_2" 2 284 "0x2c"
d G "CCP_PWM_PLUS_3" 2 285 "0x3c"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 292 "int32" `138 
f B "setup_ccp2" 2 292 "void(int32 mode)" `137 
v L "mode" 2 293 "int32" `140 
v L "pwm" 2 293 "int8" `141 
f G "setup_ccp2" 2 293 "void(int32 mode,int8 pwm)" `139 
v L "value" 2 294 "int16" `143 
f B "set_pwm2_duty" 2 294 "void(int16 value)" `142 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 301 "int32" `148 
f B "setup_spi" 2 301 "void(int32 mode)" `147 
v L "value" 2 302 "int8" `150 
f B "spi_write" 2 302 "void(int8 value)" `149 
f B "spi_read" 2 303 "int8()" `151 
v L "value" 2 304 "int8" `153 
f G "spi_read" 2 304 "int8(int8 value)" `152 
f B "spi_data_in" 2 305 "int8()" `154 
v L "mode" 2 306 "int32" `156 
f B "setup_spi2" 2 306 "void(int32 mode)" `155 
v L "value" 2 307 "int8" `158 
f B "spi_write2" 2 307 "void(int8 value)" `157 
f B "spi_read2" 2 308 "int8()" `159 
v L "value" 2 309 "int8" `161 
f G "spi_read2" 2 309 "int8(int8 value)" `160 
f B "spi_data_in2" 2 310 "int8()" `162  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 312 "0x00"
d G "SPI_MASTER" 2 313 "0x20"
d G "SPI_SLAVE" 2 314 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 315 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 316 "0x00"
d G "SPI_CLK_DIV_4" 2 317 "0x00"
d G "SPI_CLK_DIV_16" 2 318 "0x01"
d G "SPI_CLK_DIV_64" 2 319 "0x02"
d G "SPI_CLK_T2" 2 320 "0x03"
d G "SPI_SS_DISABLED" 2 321 "0x01"
d G "SPI_XMIT_L_TO_H" 2 323 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 324 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 326 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 327 "0x8000"
d G "SPI_L_TO_H" 2 330 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 331 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 2 3 2 "FUNCTION"
v L "baud" 2 335 "int32" `164 
f B "setup_uart" 2 335 "void(int32 baud)" `163 
v L "baud" 2 336 "int32" `166 
v L "stream" 2 336 "int8" `167 
f G "setup_uart" 2 336 "void(int32 baud,int8 stream)" `165 
v L "baud" 2 337 "int32" `169 
v L "stream" 2 337 "int8" `170 
v L "clock" 2 337 "int32" `171 
f G "setup_uart" 2 337 "void(int32 baud,int8 stream,int32 clock)" `168 
v L "baud" 2 338 "int32" `173 
f B "set_uart_speed" 2 338 "void(int32 baud)" `172 
v L "baud" 2 339 "int32" `175 
v L "stream" 2 339 "int8" `176 
f G "set_uart_speed" 2 339 "void(int32 baud,int8 stream)" `174 
v L "baud" 2 340 "int32" `178 
v L "stream" 2 340 "int8" `179 
v L "clock" 2 340 "int32" `180 
f G "set_uart_speed" 2 340 "void(int32 baud,int8 stream,int32 clock)" `177  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 344 "2"
d G "UART_DATA" 2 345 "4"
d G "UART_AUTODETECT" 2 346 "8"
d G "UART_AUTODETECT_NOWAIT" 2 347 "9"
d G "UART_WAKEUP_ON_RDA" 2 348 "10"
d G "UART_SEND_BREAK" 2 349 "13"
c L "set_uart_speed" 2 3 2 "FUNCTION"
v L "mode" 2 352 "int8" `182 
f B "setup_low_volt_detect" 2 352 "void(int8 mode)" `181  "Constants used in setup_low_volt_detect() are:"
d G "LVD_LVDIN" 2 354 "0x1F"
d G "LVD_42" 2 355 "0x1E"
d G "LVD_39" 2 356 "0x1D"
d G "LVD_38" 2 357 "0x1C"
d G "LVD_36" 2 358 "0x1B"
d G "LVD_34" 2 359 "0x1A"
d G "LVD_33" 2 360 "0x19"
d G "LVD_31" 2 361 "0x18"
d G "LVD_28" 2 362 "0x17"
d G "LVD_27" 2 363 "0x16"
d G "LVD_26" 2 364 "0x15"
d G "LVD_24" 2 365 "0x14"
d G "LVD_23" 2 366 "0x13"
d G "LVD_21" 2 367 "0x12"
c L "setup_low_volt_detect" 2 3 4 "FUNCTION"
v L "mode" 2 373 "int8" `184 
f B "setup_qei" 2 373 "void(int8 mode)" `183 
v L "mode" 2 374 "int8" `186 
v L "filter" 2 374 "int8" `187 
f G "setup_qei" 2 374 "void(int8 mode,int8 filter)" `185 
v L "mode" 2 375 "int8" `189 
v L "filter" 2 375 "int8" `190 
v L "max_count" 2 375 "int16" `191 
f G "setup_qei" 2 375 "void(int8 mode,int8 filter,int16 max_count)" `188 
v L "value" 2 376 "int16" `193 
f B "qei_set_count" 2 376 "void(int16 value)" `192 
f B "qei_get_count" 2 377 "int16()" `194 
v L "which" 2 378 "int8" `196 
f G "qei_get_count" 2 378 "int16(int8 which)" `195 
f B "qei_status" 2 379 "int8()" `197  "Constants used in setup_qei() first param are:"
d G "QEI_DISABLED" 2 381 "0x00"
d G "QEI_MODE_X2_RESET_WITH_INDX" 2 382 "0x04"
d G "QEI_MODE_X2_RESET_ON_MATCH" 2 383 "0x08"
d G "QEI_MODE_X4_RESET_WITH_INDX" 2 384 "0x14"
d G "QEI_MODE_X4_RESET_ON_MATCH" 2 385 "0x18"
d G "QEI_VELOCITY_MODE_ENABLED" 2 386 "0x00"
d G "QEI_VELOCITY_MODE_DISABLED" 2 387 "0x80"
d G "QEI_VELOCITY_PULSE_DIV_1" 2 388 "0x00"
d G "QEI_VELOCITY_PULSE_DIV_4" 2 389 "0x01"
d G "QEI_VELOCITY_PULSE_DIV_16" 2 390 "0x02"
d G "QEI_VELOCITY_PULSE_DIV_64" 2 391 "0x03"
d G "QEI_FILTER_DISABLED" 2 394 "0x00"
d G "QEI_FILTER_ENABLE_T5CKI" 2 395 "0x40"
d G "QEI_FILTER_ENABLE_QEB" 2 396 "0x20"
d G "QEI_FILTER_ENABLE_QEA" 2 397 "0x10"
d G "QEI_FILTER_ENABLE_INDX" 2 398 "0x08"
d G "QEI_FILTER_DIV_1" 2 399 "0x00"
d G "QEI_FILTER_DIV_2" 2 400 "0x01"
d G "QEI_FILTER_DIV_4" 2 401 "0x02"
d G "QEI_FILTER_DIV_16" 2 402 "0x03"
d G "QEI_FILTER_DIV_32" 2 403 "0x04"
d G "QEI_FILTER_DIV_64" 2 404 "0x05"
d G "QEI_FILTER_DIV_128" 2 405 "0x06"
d G "QEI_GET_POSITION_COUNT" 2 408 "0"
d G "QEI_GET_VELOCITY_COUNT" 2 409 "1"
d G "QEI_ERROR" 2 412 "0x40"
d G "QEI_FORWARD" 2 413 "0x20"
c L "qei_status" 2 3 2 "FUNCTION"
v L "mode" 2 418 "int8" `199 
f B "setup_oscillator" 2 418 "int8(int8 mode)" `198 
v L "mode" 2 419 "int8" `201 
v L "tune" 2 419 "sint8" `202 
f G "setup_oscillator" 2 419 "int8(int8 mode,sint8 tune)" `200  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 421 "0"
d G "OSC_125KHZ" 2 422 "0x10"
d G "OSC_250KHZ" 2 423 "0x20"
d G "OSC_500KHZ" 2 424 "0x30"
d G "OSC_1MHZ" 2 425 "0x40"
d G "OSC_2MHZ" 2 426 "0x50"
d G "OSC_4MHZ" 2 427 "0x60"
d G "OSC_8MHZ" 2 428 "0x70"
d G "OSC_TIMER1" 2 430 "1"
d G "OSC_INTRC" 2 431 "2"
d G "OSC_NORMAL" 2 432 "0"
d G "OSC_IDLE_MODE" 2 434 "0x80"
d G "OSC_STATE_STABLE" 2 438 "4"
d G "OSC_STATE_EXT_RUNNING" 2 439 "8"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 445 "int32" `204 
v L "postscale" 2 445 "int8" `205 
v L "time_base" 2 445 "int16" `206 
v L "period" 2 445 "int16" `207 
v L "compare" 2 445 "int8" `208 
v L "compare_postscale" 2 445 "int8" `209 
v L "dead_time" 2 445 "int8" `210 
f B "setup_power_pwm" 2 445 "void(int32 mode,int8 postscale,int16 time_base,int16 period,int8 compare,int8 compare_postscale,int8 dead_time)" `203 
v L "duty" 2 446 "int16" `212 
f B "set_power_pwm0_duty" 2 446 "void(int16 duty)" `211 
v L "duty" 2 447 "int16" `214 
f B "set_power_pwm2_duty" 2 447 "void(int16 duty)" `213 
v L "duty" 2 448 "int16" `216 
f B "set_power_pwm4_duty" 2 448 "void(int16 duty)" `215 
v L "duty" 2 449 "int16" `218 
f B "set_power_pwm6_duty" 2 449 "void(int16 duty)" `217 
v L "module0" 2 450 "int8" `220 
v L "module1" 2 450 "int8" `221 
v L "module2" 2 450 "int8" `222 
v L "module3" 2 450 "int8" `223 
f B "setup_power_pwm_pins" 2 450 "void(int8 module0,int8 module1,int8 module2,int8 module3)" `219 
v L "mode" 2 451 "int8" `225 
f B "setup_power_pwm_faults" 2 451 "void(int8 mode)" `224  "Constants used for SETUP_POWER_PWM() are:"
d G "PWM_CLOCK_DIV_4" 2 453 "0x00"
d G "PWM_CLOCK_DIV_16" 2 454 "0x04"
d G "PWM_CLOCK_DIV_64" 2 455 "0x08"
d G "PWM_CLOCK_DIV_128" 2 456 "0x0C"
d G "PWM_DISABLED" 2 458 "0x0000"
d G "PWM_FREE_RUN" 2 459 "0x8000"
d G "PWM_SINGLE_SHOT" 2 460 "0x8001"
d G "PWM_UP_DOWN" 2 461 "0x8002"
d G "PWM_UP_DOWN_INT" 2 462 "0x8003"
d G "PWM_OVERRIDE_SYNC" 2 464 "0x10000"
d G "PWM_UP_TRIGGER" 2 466 "0x00000"
d G "PWM_DOWN_TRIGGER" 2 467 "0x80000"
d G "PWM_DEAD_CLOCK_DIV_2" 2 469 "0x000000"
d G "PWM_DEAD_CLOCK_DIV_4" 2 470 "0x100000"
d G "PWM_DEAD_CLOCK_DIV_8" 2 471 "0x200000"
d G "PWM_DEAD_CLOCK_DIV_16" 2 472 "0x300000"
d G "PWM_UPDATE_DISABLE" 2 475 "0x20000"
d G "PWM_UPDATE_ENABLE" 2 476 "0x00000"
d G "PWM_PINS_DISABLED" 2 479 "0"
d G "PWM_ODD_ON" 2 480 "1"
d G "PWM_BOTH_ON" 2 481 "2"
d G "PWM_COMPLEMENTARY" 2 482 "3"
d G "PWM_ENABLE_FLTA" 2 485 "0x01"
d G "PWM_AUTO_CLEAR_FLTA" 2 486 "0x02"
d G "PWM_FAULT_ON_BREAKPOINT" 2 487 "0x80"
c L "setup_power_pwm_faults" 2 3 4 "FUNCTION"
v L "mode" 2 496 "int32" `228 
f B "setup_adc" 2 496 "void(int32 mode)" `227 
f B "read_adc" 2 497 "int8()" `229 
v L "mode" 2 498 "int8" `231 
f G "read_adc" 2 498 "int8(int8 mode)" `230 
f G "read_adc" 2 499 "int16()" `232 
v L "mode" 2 500 "int8" `234 
f G "read_adc" 2 500 "int16(int8 mode)" `233 
f B "adc_done" 2 501 "int8()" `235  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 503 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 504 "0x1000000"
d G "ADC_CLOCK_DIV_4" 2 505 "0x0400"
d G "ADC_CLOCK_DIV_8" 2 506 "0x0100"
d G "ADC_CLOCK_DIV_16" 2 507 "0x0500"
d G "ADC_CLOCK_DIV_32" 2 508 "0x0200"
d G "ADC_CLOCK_DIV_64" 2 509 "0x0600"
d G "ADC_CLOCK_INTERNAL" 2 510 "0x0700" "Internal 2-6us"
d G "ADC_TAD_MUL_0" 2 513 "0x0000"
d G "ADC_TAD_MUL_2" 2 514 "0x0800"
d G "ADC_TAD_MUL_4" 2 515 "0x1000"
d G "ADC_TAD_MUL_6" 2 516 "0x1800"
d G "ADC_TAD_MUL_8" 2 517 "0x2000"
d G "ADC_TAD_MUL_10" 2 518 "0x2800"
d G "ADC_TAD_MUL_12" 2 519 "0x3000"
d G "ADC_TAD_MUL_16" 2 520 "0x3800"
d G "ADC_TAD_MUL_20" 2 521 "0x4000"
d G "ADC_TAD_MUL_24" 2 522 "0x4800"
d G "ADC_TAD_MUL_28" 2 523 "0x5000"
d G "ADC_TAD_MUL_32" 2 524 "0x5800"
d G "ADC_TAD_MUL_36" 2 525 "0x6000"
d G "ADC_TAD_MUL_40" 2 526 "0x6800"
d G "ADC_TAD_MUL_48" 2 527 "0x7000"
d G "ADC_TAD_MUL_64" 2 528 "0x7800"
d G "ADC_SINGLE_SHOT_A" 2 531 "0x00" "Single conversion of Channels A"
d G "ADC_SINGLE_SHOT_B" 2 532 "0x04" "Single conversion of Channels B"
d G "ADC_SINGLE_SHOT_C" 2 533 "0x08" "Single conversion of Channels C"
d G "ADC_SINGLE_SHOT_D" 2 534 "0x0C" "Single conversion of Channels D"
d G "ADC_SINGLE_SHOT_A_B" 2 536 "0x10" "Single conversion of Channels A and B, sampling done sequentially"
d G "ADC_SINGLE_SHOT_A_B_C_D" 2 537 "0x14" "Single conversion of Channels A, B, C and D, sampling done sequentially"
d G "ADC_SINGLE_SHOT_AB" 2 538 "0x18" "Single conversion of Channels A and B, sampling done simultaneously"
d G "ADC_SINGLE_SHOT_AB_CD" 2 539 "0x1C" "Single conversion of Channels A, B, C and D, sampling A and B simultaneously then C and D simultaneously"
d G "ADC_CONT_A" 2 541 "0x20" "Channel A converted continuously"
d G "ADC_CONT_B" 2 542 "0x24" "Channel A converted continuously"
d G "ADC_CONT_C" 2 543 "0x28" "Channel A converted continuously"
d G "ADC_CONT_D" 2 544 "0x2C" "Channel A converted continuously"
d G "ADC_CONT_A_B" 2 546 "0x30" "Channels A and B converted continuously, sampling done sequentially"
d G "ADC_CONT_A_B_C_D" 2 547 "0x34" "Channels A, B, C and D converted continuously, sampling done sequentially"
d G "ADC_CONT_AB" 2 548 "0x38" "Channels A and B converted continuously, sampling done simultaneously"
d G "ADC_CONT_AB_CD" 2 549 "0x3C" "Channels A, B, C and D converted continuously, sampling A and B simultaneously then C and D simultaneously"
d G "ADC_FIFO_DISABLED" 2 552 "0x00000000" "ADC FIFO Buffer not used"
d G "ADC_FIFO_ENABLED" 2 553 "0x80000000" "ADC FIFO Buffer used, should be used if converting more then one channel or if continuous conversion"
d G "ADC_WHEN_INT0" 2 557 "0x010000"
d G "ADC_WHEN_TIMER5" 2 558 "0x020000"
d G "ADC_WHEN_IC1" 2 559 "0x040000"
d G "ADC_WHEN_CCP2" 2 560 "0x080000"
d G "ADC_WHEN_PPWM" 2 561 "0x100000"
d G "ADC_INT_EVERY_TIME" 2 564 "0x000000" "These options are"
d G "ADC_INT_EVERY_OTHER" 2 565 "0x400000" "ignored in single"
d G "ADC_INT_EVERY_FOUR" 2 566 "0x800000" "shot mode."
c L "adc_done" 2 3 3 "FUNCTION"
v L "pins" 2 572 "int32" `237 
f B "setup_adc_ports" 2 572 "void(int32 pins)" `236 
v L "pins" 2 573 "int32" `239 
v L "reference" 2 573 "int32" `240 
f G "setup_adc_ports" 2 573 "void(int32 pins,int32 reference)" `238 
v L "channel" 2 574 "int8" `242 
f B "set_adc_channel" 2 574 "void(int8 channel)" `241  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 578 "1" "| A0"
d G "sAN1" 2 579 "2" "| A1"
d G "sAN2" 2 580 "4" "| A2"
d G "sAN3" 2 581 "8" "| A3"
d G "sAN4" 2 582 "16" "| A4"
d G "NO_ANALOGS" 2 583 "0" "None"
d G "ALL_ANALOG" 2 584 "31" "A0 A1 A2 A3 A4"
d G "VSS_VDD" 2 587 "0x0000" "| Range 0-Vdd"
d G "VREF_VREF" 2 588 "0xC000" "| Range VrefL-VrefH"
d G "VSS_VREF" 2 589 "0x4000" "| Range 0-VrefH"
d G "VREF_VDD" 2 590 "0x8000" "| Range VrefL-Vdd"
d G "ADC_START_AND_READ" 2 593 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 594 "1"
d G "ADC_READ_ONLY" 2 595 "6"
d G "ADC_READ_ONLY_FROM_INT" 2 596 "4"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 602 "sint8" `244 
f B "abs" 2 602 "sint8(sint8 x)" `243 
v L "x" 2 603 "sint16" `246 
f G "abs" 2 603 "sint16(sint16 x)" `245 
v L "x" 2 604 "sint32" `248 
f G "abs" 2 604 "sint32(sint32 x)" `247 
v L "x" 2 605 "float" `250 
f G "abs" 2 605 "float(float x)" `249 
v L "??65535" 2 606 "int8" `252 
v L "??65535" 2 606 "int8" `253 
f B "_mul" 2 606 "int16(int8 ,int8 )" `251 
v L "??65535" 2 607 "sint8" `252 
v L "??65535" 2 607 "sint8" `256 
f G "_mul" 2 607 "sint16(sint8 ,sint8 )" `254 
v L "??65535" 2 608 "int16" `252 
v L "??65535" 2 608 "int16" `259 
f G "_mul" 2 608 "int32(int16 ,int16 )" `257 
v L "??65535" 2 609 "sint16" `252 
v L "??65535" 2 609 "sint16" `262 
f G "_mul" 2 609 "sint32(sint16 ,sint16 )" `260  "Memory Manipulation Prototypes:"
v L "bank" 2 612 "int8" `264 
v L "offset" 2 612 "int8" `265 
f B "read_bank" 2 612 "int8(int8 bank,int8 offset)" `263 
v L "bank" 2 613 "int8" `267 
v L "offset" 2 613 "int8" `268 
v L "value" 2 613 "int8" `269 
f B "write_bank" 2 613 "void(int8 bank,int8 offset,int8 value)" `266 
v L "dest" 2 614 "*int8" `271 
v L "src" 2 614 "*int8" `272 
f B "strcpy" 2 614 "void(*int8 dest,*int8 src)" `270 
v L "dest" 2 615 "*int8" `274 
v L "src" 2 615 "*int8" `275 
f B "strcopy" 2 615 "void(*int8 dest,*int8 src)" `273 
v L "destination" 2 616 "*int8" `277 
v L "value" 2 616 "int8" `278 
v L "num" 2 616 "int16" `279 
f B "memset" 2 616 "void(*int8 destination,int8 value,int16 num)" `276 
v L "destination" 2 617 "*int8" `281 
v L "source" 2 617 "*int8" `282 
v L "num" 2 617 "int16" `283 
f B "memcpy" 2 617 "void(*int8 destination,*int8 source,int16 num)" `280  "String Prototypes:"
v L "cvalue" 2 620 "int8" `285 
f B "toupper" 2 620 "int8(int8 cvalue)" `284 
v L "cvalue" 2 621 "int8" `287 
f B "tolower" 2 621 "int8(int8 cvalue)" `286 
v L "string" 2 622 "*int8" `289 
v L "cstring" 2 622 "*int8" `290 
f B "sprintf" 2 622 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `288  "Data Manipulators Prototypes:"
v L "address" 2 625 "*int8" `293 
v L "bytes" 2 625 "int8" `294 
v L "value" 2 625 "int8" `295 
f B "shift_left" 2 625 "int8(*int8 address,int8 bytes,int8 value)" `292 
v L "address" 2 626 "*int8" `297 
v L "bytes" 2 626 "int8" `298 
v L "value" 2 626 "int8" `299 
f B "shift_right" 2 626 "int8(*int8 address,int8 bytes,int8 value)" `296 
v L "address" 2 627 "*int8" `301 
v L "bytes" 2 627 "int8" `302 
f B "rotate_left" 2 627 "void(*int8 address,int8 bytes)" `300 
v L "address" 2 628 "*int8" `304 
v L "bytes" 2 628 "int8" `305 
f B "rotate_right" 2 628 "void(*int8 address,int8 bytes)" `303 
v L "value" 2 629 "int8" `307 
f B "swap" 2 629 "void(int8 value)" `306 
v L "var" 2 630 "int16" `309 
v L "offset" 2 630 "int8" `310 
f B "make8" 2 630 "int8(int16 var,int8 offset)" `308 
v L "var" 2 631 "int32" `309 
v L "offset" 2 631 "int8" `313 
f G "make8" 2 631 "int8(int32 var,int8 offset)" `311 
v L "varhigh" 2 632 "int8" `315 
v L "varlow" 2 632 "int8" `316 
f B "make16" 2 632 "int16(int8 varhigh,int8 varlow)" `314 
v L "var1" 2 633 "int16" `318 
f B "make32" 2 633 "int32(int16 var1)" `317 
v L "var1" 2 634 "int16" `320 
v L "var2" 2 634 "int16" `321 
f G "make32" 2 634 "int32(int16 var1,int16 var2)" `319 
v L "var1" 2 635 "int16" `320 
v L "var2" 2 635 "int8" `324 
f G "make32" 2 635 "int32(int16 var1,int8 var2)" `322 
v L "var1" 2 636 "int16" `326 
v L "var2" 2 636 "int8" `327 
v L "var3" 2 636 "int8" `328 
f G "make32" 2 636 "int32(int16 var1,int8 var2,int8 var3)" `325 
v L "var1" 2 637 "int8" `330 
f G "make32" 2 637 "int32(int8 var1)" `329 
v L "var1" 2 638 "int8" `320 
v L "var2" 2 638 "int8" `333 
f G "make32" 2 638 "int32(int8 var1,int8 var2)" `331 
v L "var1" 2 639 "int8" `326 
v L "var2" 2 639 "int8" `327 
v L "var3" 2 639 "int8" `337 
f G "make32" 2 639 "int32(int8 var1,int8 var2,int8 var3)" `334 
v L "var1" 2 640 "int8" `339 
v L "var2" 2 640 "int8" `340 
v L "var3" 2 640 "int8" `341 
v L "var4" 2 640 "int8" `342 
f G "make32" 2 640 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `338 
v L "var1" 2 641 "int8" `320 
v L "var2" 2 641 "int16" `345 
f G "make32" 2 641 "int32(int8 var1,int16 var2)" `343 
v L "var1" 2 642 "int8" `326 
v L "var2" 2 642 "int16" `327 
v L "var3" 2 642 "int8" `349 
f G "make32" 2 642 "int32(int8 var1,int16 var2,int8 var3)" `346 
v L "var1" 2 643 "int8" `326 
v L "var2" 2 643 "int8" `327 
v L "var3" 2 643 "int16" `353 
f G "make32" 2 643 "int32(int8 var1,int8 var2,int16 var3)" `350 
v L "var" 2 644 "int8" `355 
v L "bit" 2 644 "int8" `356 
f B "bit_set" 2 644 "void(int8 var,int8 bit)" `354 
v L "var" 2 645 "int16" `355 
v L "bit" 2 645 "int8" `359 
f G "bit_set" 2 645 "void(int16 var,int8 bit)" `357 
v L "var" 2 646 "int32" `355 
v L "bit" 2 646 "int8" `362 
f G "bit_set" 2 646 "void(int32 var,int8 bit)" `360 
v L "var" 2 647 "int8" `364 
v L "bit" 2 647 "int8" `365 
f B "bit_clear" 2 647 "void(int8 var,int8 bit)" `363 
v L "var" 2 648 "int16" `364 
v L "bit" 2 648 "int8" `368 
f G "bit_clear" 2 648 "void(int16 var,int8 bit)" `366 
v L "var" 2 649 "int32" `364 
v L "bit" 2 649 "int8" `371 
f G "bit_clear" 2 649 "void(int32 var,int8 bit)" `369 
v L "var" 2 650 "int8" `373 
v L "bit" 2 650 "int8" `374 
f B "bit_test" 2 650 "int8(int8 var,int8 bit)" `372 
v L "var" 2 651 "int16" `373 
v L "bit" 2 651 "int8" `377 
f G "bit_test" 2 651 "int8(int16 var,int8 bit)" `375 
v L "var" 2 652 "int32" `373 
v L "bit" 2 652 "int8" `380 
f G "bit_test" 2 652 "int8(int32 var,int8 bit)" `378  "#use delay() Prototypes:"
v L "count" 2 655 "int8" `382 
f B "delay_cycles" 2 655 "void(int8 count)" `381 
v L "time" 2 656 "int16" `384 
f B "delay_ms" 2 656 "void(int16 time)" `383 
v L "time" 2 657 "int16" `386 
f B "delay_us" 2 657 "void(int16 time)" `385  "#use rs232() Prototypes:"
v L "cdata" 2 660 "int8" `388 
f B "putchar" 2 660 "void(int8 cdata)" `387 
v L "cdata" 2 661 "int8" `390 
v L "stream" 2 661 "int8" `391 
f G "putchar" 2 661 "void(int8 cdata,int8 stream)" `389 
v L "string" 2 662 "*int8" `393 
f B "puts" 2 662 "void(*int8 string)" `392 
v L "string" 2 663 "*int8" `395 
v L "stream" 2 663 "int8" `396 
f G "puts" 2 663 "void(*int8 string,int8 stream)" `394 
f B "getch" 2 664 "int8()" `397 
v L "stream" 2 665 "int8" `399 
f G "getch" 2 665 "int8(int8 stream)" `398 
v L "string" 2 666 "*int8" `401 
f B "gets" 2 666 "void(*int8 string)" `400 
v L "string" 2 667 "*int8" `403 
v L "stream" 2 667 "int8" `404 
f G "gets" 2 667 "void(*int8 string,int8 stream)" `402 
f B "kbhit" 2 668 "int8()" `405 
v L "stream" 2 669 "int8" `407 
f G "kbhit" 2 669 "int8(int8 stream)" `406 
v L "string" 2 670 "*int8" `409 
f B "printf" 2 670 "void(*int8 string,*int8 _VA_LIST)" `408 
v L "stream" 2 671 "int8" `412 
v L "string" 2 671 "*int8" `413 
f B "fprintf" 2 671 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `411 
f B "putc_send" 2 672 "void()" `415 
v L "stream" 2 673 "int8" `417 
f B "fputc_send" 2 673 "void(int8 stream)" `416 
f B "rcv_buffer_full" 2 674 "int8()" `418 
v L "stream" 2 675 "int8" `420 
f G "rcv_buffer_full" 2 675 "int8(int8 stream)" `419 
f B "rcv_buffer_bytes" 2 676 "int16()" `421 
v L "stream" 2 677 "int8" `423 
f G "rcv_buffer_bytes" 2 677 "int16(int8 stream)" `422 
f B "tx_buffer_full" 2 678 "int8()" `424 
v L "stream" 2 679 "int8" `426 
f G "tx_buffer_full" 2 679 "int8(int8 stream)" `425 
f B "tx_buffer_bytes" 2 680 "int16()" `427 
v L "stream" 2 681 "int8" `429 
f G "tx_buffer_bytes" 2 681 "int16(int8 stream)" `428  "#use i2c() Prototypes:"
f B "i2c_read" 2 684 "int8()" `430 
v L "stream" 2 685 "int8" `432 
f G "i2c_read" 2 685 "int8(int8 stream)" `431 
v L "stream" 2 686 "int8" `434 
v L "ack" 2 686 "int8" `435 
f G "i2c_read" 2 686 "int8(int8 stream,int8 ack)" `433 
v L "data" 2 687 "int8" `437 
f B "i2c_write" 2 687 "int8(int8 data)" `436 
v L "stream" 2 688 "int8" `439 
v L "data" 2 688 "int8" `440 
f G "i2c_write" 2 688 "int8(int8 stream,int8 data)" `438 
f B "i2c_start" 2 689 "void()" `441 
v L "stream" 2 690 "int8" `443 
f G "i2c_start" 2 690 "void(int8 stream)" `442 
v L "stream" 2 691 "int8" `445 
v L "restart" 2 691 "int8" `446 
f G "i2c_start" 2 691 "void(int8 stream,int8 restart)" `444 
f B "i2c_stop" 2 692 "void()" `447 
v L "stream" 2 693 "int8" `449 
f G "i2c_stop" 2 693 "void(int8 stream)" `448 
f B "i2c_isr_state" 2 694 "int8()" `450 
v L "addr" 2 695 "int8" `452 
f B "i2c_slaveaddr" 2 695 "void(int8 addr)" `451 
v L "stream" 2 696 "int8" `454 
v L "addr" 2 696 "int8" `455 
f G "i2c_slaveaddr" 2 696 "void(int8 stream,int8 addr)" `453 
f B "i2c_poll" 2 697 "int8()" `456 
v L "stream" 2 698 "int8" `458 
f G "i2c_poll" 2 698 "int8(int8 stream)" `457 
v L "baud" 2 699 "int32" `460 
f B "i2c_init" 2 699 "void(int32 baud)" `459 
v L "stream" 2 700 "int8" `462 
v L "baud" 2 700 "int32" `463 
f G "i2c_init" 2 700 "void(int8 stream,int32 baud)" `461  "#use spi() Prototypes:"
f B "spi_xfer" 2 703 "int8()" `464 
f G "spi_xfer" 2 704 "int16()" `465 
f G "spi_xfer" 2 705 "int32()" `466 
v L "data" 2 706 "int8" `468 
f G "spi_xfer" 2 706 "int8(int8 data)" `467 
v L "data" 2 707 "int16" `470 
f G "spi_xfer" 2 707 "int16(int16 data)" `469 
v L "data" 2 708 "int32" `472 
f G "spi_xfer" 2 708 "int32(int32 data)" `471 
v L "stream" 2 709 "int8" `474 
v L "data" 2 709 "int8" `475 
f G "spi_xfer" 2 709 "int8(int8 stream,int8 data)" `473 
v L "stream" 2 710 "int8" `474 
v L "data" 2 710 "int16" `478 
f G "spi_xfer" 2 710 "int16(int8 stream,int16 data)" `476 
v L "stream" 2 711 "int8" `474 
v L "data" 2 711 "int32" `481 
f G "spi_xfer" 2 711 "int32(int8 stream,int32 data)" `479 
v L "stream" 2 712 "int8" `483 
v L "data" 2 712 "int8" `484 
v L "bits" 2 712 "int8" `485 
f G "spi_xfer" 2 712 "int8(int8 stream,int8 data,int8 bits)" `482 
v L "stream" 2 713 "int8" `483 
v L "data" 2 713 "int16" `484 
v L "bits" 2 713 "int8" `489 
f G "spi_xfer" 2 713 "int16(int8 stream,int16 data,int8 bits)" `486 
v L "stream" 2 714 "int8" `483 
v L "data" 2 714 "int32" `484 
v L "bits" 2 714 "int8" `493 
f G "spi_xfer" 2 714 "int32(int8 stream,int32 data,int8 bits)" `490 
v L "baud" 2 715 "int32" `495 
f B "spi_init" 2 715 "void(int32 baud)" `494 
v L "stream" 2 716 "int8" `497 
v L "baud" 2 716 "int32" `498 
f G "spi_init" 2 716 "void(int8 stream,int32 baud)" `496 
v L "baud" 2 717 "int32" `500 
f B "spi_speed" 2 717 "void(int32 baud)" `499 
v L "stream" 2 718 "int8" `502 
v L "baud" 2 718 "int32" `503 
f G "spi_speed" 2 718 "void(int8 stream,int32 baud)" `501 
v L "stream" 2 719 "int8" `505 
v L "baud" 2 719 "int32" `506 
v L "clock" 2 719 "int32" `507 
f G "spi_speed" 2 719 "void(int8 stream,int32 baud,int32 clock)" `504 
v L "data" 2 720 "int8" `509 
f B "spi_prewrite" 2 720 "void(int8 data)" `508 
v L "data" 2 721 "int16" `511 
f G "spi_prewrite" 2 721 "void(int16 data)" `510 
v L "data" 2 722 "int32" `513 
f G "spi_prewrite" 2 722 "void(int32 data)" `512 
v L "??65535" 2 723 "int8" `515 
v L "data" 2 723 "int8" `516 
f G "spi_prewrite" 2 723 "void(int8 ,int8 data)" `514 
v L "??65535" 2 724 "int8" `515 
v L "data" 2 724 "int16" `519 
f G "spi_prewrite" 2 724 "void(int8 ,int16 data)" `517 
v L "??65535" 2 725 "int8" `515 
v L "data" 2 725 "int32" `522 
f G "spi_prewrite" 2 725 "void(int8 ,int32 data)" `520 
f B "spi_xfer_in" 2 726 "int8()" `523 
f G "spi_xfer_in" 2 727 "int16()" `524 
f G "spi_xfer_in" 2 728 "int32()" `525 
v L "bits" 2 729 "int8" `527 
f G "spi_xfer_in" 2 729 "int8(int8 bits)" `526 
v L "bits" 2 730 "int8" `529 
f G "spi_xfer_in" 2 730 "int16(int8 bits)" `528 
v L "bits" 2 731 "int8" `531 
f G "spi_xfer_in" 2 731 "int32(int8 bits)" `530 
v L "stream" 2 732 "int8" `533 
v L "bits" 2 732 "int8" `534 
f G "spi_xfer_in" 2 732 "int8(int8 stream,int8 bits)" `532 
v L "stream" 2 733 "int8" `533 
v L "bits" 2 733 "int8" `537 
f G "spi_xfer_in" 2 733 "int16(int8 stream,int8 bits)" `535 
v L "stream" 2 734 "int8" `533 
v L "bits" 2 734 "int8" `540 
f G "spi_xfer_in" 2 734 "int32(int8 stream,int8 bits)" `538  "#use rtos() Prototypes:"
f B "rtos_run" 2 737 "void()" `541 
f B "rtos_yield" 2 738 "void()" `542 
v L "task" 2 739 "int8" `544 
f B "rtos_enable" 2 739 "void(int8 task)" `543 
v L "task" 2 740 "int8" `546 
f B "rtos_disable" 2 740 "void(int8 task)" `545 
f B "rtos_terminate" 2 741 "void()" `547 
v L "flag" 2 742 "int8" `549 
f B "rtos_await" 2 742 "void(int8 flag)" `548 
v L "sem" 2 743 "int8" `551 
f B "rtos_wait" 2 743 "void(int8 sem)" `550 
v L "sem" 2 744 "int8" `553 
f B "rtos_signal" 2 744 "void(int8 sem)" `552 
v L "task" 2 745 "int8" `555 
v L "msg" 2 745 "int8" `556 
f B "rtos_msg_send" 2 745 "void(int8 task,int8 msg)" `554 
f B "rtos_msg_read" 2 746 "int8()" `557 
f B "rtos_msg_poll" 2 747 "int8()" `558 
v L "task" 2 748 "int8" `560 
f B "rtos_overrun" 2 748 "int8(int8 task)" `559 
v L "task" 2 749 "int8" `562 
v L "stat" 2 749 "*int8" `563 
f B "rtos_stats" 2 749 "void(int8 task,*int8 stat)" `561  "#use timer() Prototypes:"
f B "get_ticks" 2 752 "int8()" `564 
f G "get_ticks" 2 753 "int16()" `565 
f G "get_ticks" 2 754 "int32()" `566 
v L "stream" 2 755 "int8" `568 
f G "get_ticks" 2 755 "int8(int8 stream)" `567 
v L "stream" 2 756 "int8" `570 
f G "get_ticks" 2 756 "int16(int8 stream)" `569 
v L "stream" 2 757 "int8" `572 
f G "get_ticks" 2 757 "int32(int8 stream)" `571 
v L "value" 2 758 "int8" `574 
f B "set_ticks" 2 758 "void(int8 value)" `573 
v L "value" 2 759 "int16" `576 
f G "set_ticks" 2 759 "void(int16 value)" `575 
v L "value" 2 760 "int32" `578 
f G "set_ticks" 2 760 "void(int32 value)" `577 
v L "stream" 2 761 "int8" `580 
v L "value" 2 761 "int8" `581 
f G "set_ticks" 2 761 "void(int8 stream,int8 value)" `579 
v L "stream" 2 762 "int8" `580 
v L "value" 2 762 "int16" `584 
f G "set_ticks" 2 762 "void(int8 stream,int16 value)" `582 
v L "stream" 2 763 "int8" `580 
v L "value" 2 763 "int32" `587 
f G "set_ticks" 2 763 "void(int8 stream,int32 value)" `585  "#use pwm() Prototypes:"
f B "pwm_on" 2 766 "void()" `588 
v L "stream" 2 767 "int8" `590 
f G "pwm_on" 2 767 "void(int8 stream)" `589 
f B "pwm_off" 2 768 "void()" `591 
v L "stream" 2 769 "int8" `593 
f G "pwm_off" 2 769 "void(int8 stream)" `592 
v L "duty" 2 770 "int16" `595 
f B "pwm_set_duty" 2 770 "void(int16 duty)" `594 
v L "stream" 2 771 "int8" `597 
v L "duty" 2 771 "int16" `598 
f G "pwm_set_duty" 2 771 "void(int8 stream,int16 duty)" `596 
v L "percent" 2 772 "int16" `600 
f B "pwm_set_duty_percent" 2 772 "void(int16 percent)" `599 
v L "stream" 2 773 "int8" `602 
v L "percent" 2 773 "int16" `603 
f G "pwm_set_duty_percent" 2 773 "void(int8 stream,int16 percent)" `601 
v L "frequency" 2 774 "int32" `605 
f B "pwm_set_frequency" 2 774 "void(int32 frequency)" `604 
v L "stream" 2 775 "int8" `607 
v L "frequency" 2 775 "int32" `608 
f G "pwm_set_frequency" 2 775 "void(int8 stream,int32 frequency)" `606  "#use capture() Prototypes:"
f B "get_capture_time" 2 778 "int16()" `609 
v L "stream" 2 779 "int8" `611 
f G "get_capture_time" 2 779 "int16(int8 stream)" `610 
f B "get_capture_event" 2 780 "int8()" `612 
v L "stream" 2 781 "int8" `614 
f G "get_capture_event" 2 781 "int8(int8 stream)" `613  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 794 "int16" `616 
f B "goto_address" 2 794 "void(int16 address)" `615 
v L "label" 2 795 "int16" `618 
f B "label_address" 2 795 "int16(int16 label)" `617  "Program Memory Prototypes:"
v L "address" 2 798 "int16" `620 
v L "dataptr" 2 798 "*int8" `621 
v L "count" 2 798 "int16" `622 
f B "read_program_memory" 2 798 "void(int16 address,*int8 dataptr,int16 count)" `619 
v L "address" 2 799 "int16" `624 
f B "read_program_eeprom" 2 799 "int16(int16 address)" `623 
v L "address" 2 800 "int16" `626 
f B "erase_program_eeprom" 2 800 "void(int16 address)" `625 
v L "address" 2 801 "int16" `628 
v L "dataptr" 2 801 "*int8" `629 
v L "count" 2 801 "int16" `630 
f B "write_program_memory" 2 801 "void(int16 address,*int8 dataptr,int16 count)" `627 
v L "address" 2 802 "int16" `632 
v L "data" 2 802 "int16" `633 
f B "write_program_eeprom" 2 802 "void(int16 address,int16 data)" `631  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 807 "int16" `634 
v L "address" 2 812 "__EEADDRESS__" `636 
f B "read_eeprom" 2 812 "int8(__EEADDRESS__ address)" `635 
v L "address" 2 813 "__EEADDRESS__" `638 
v L "value" 2 813 "int8" `639 
f B "write_eeprom" 2 813 "void(__EEADDRESS__ address,int8 value)" `637  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 820 "int32" `641 
f B "enable_interrupts" 2 820 "void(int32 interrupt)" `640 
v L "interrupt" 2 821 "int32" `643 
f B "disable_interrupts" 2 821 "void(int32 interrupt)" `642 
v L "interrupt" 2 822 "int32" `645 
f B "clear_interrupt" 2 822 "void(int32 interrupt)" `644 
v L "interrupt" 2 823 "int32" `647 
f B "interrupt_active" 2 823 "int8(int32 interrupt)" `646 
v L "interrupt" 2 824 "int32" `649 
f B "interrupt_enabled" 2 824 "int8(int32 interrupt)" `648 
v L "source" 2 825 "int8" `651 
v L "edge" 2 825 "int8" `652 
f B "ext_int_edge" 2 825 "void(int8 source,int8 edge)" `650 
v L "address" 2 826 "int16" `654 
f B "jump_to_irs" 2 826 "void(int16 address)" `653  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 828 "0x40"
d G "H_TO_L" 2 829 "0"
d G "GLOBAL" 2 831 "0xF2C0"
d G "PERIPH" 2 832 "0xF240"
d G "INT_RTCC" 2 833 "0x00F220"
d G "INT_TIMER0" 2 834 "0x00F220"
d G "INT_TIMER1" 2 835 "0x009D01"
d G "INT_TIMER2" 2 836 "0x009D02"
d G "INT_EXT_L2H" 2 837 "0x5000F210"
d G "INT_EXT_H2L" 2 838 "0x6000F210"
d G "INT_EXT" 2 839 "0x00F210"
d G "INT_EXT1_L2H" 2 840 "0x5001F008"
d G "INT_EXT1_H2L" 2 841 "0x6001F008"
d G "INT_EXT1" 2 842 "0x00F008"
d G "INT_EXT2_L2H" 2 843 "0x5002F010"
d G "INT_EXT2_H2L" 2 844 "0x6002F010"
d G "INT_EXT2" 2 845 "0x00F010"
d G "INT_RB" 2 846 "0x00FFF208"
d G "INT_AD" 2 847 "0x009D40"
d G "INT_RDA" 2 848 "0x009D20"
d G "INT_TBE" 2 849 "0x009D10"
d G "INT_SSP" 2 850 "0x009D08"
d G "INT_CCP1" 2 851 "0x009D04"
d G "INT_CCP2" 2 852 "0x00A001"
d G "INT_LOWVOLT" 2 853 "0x00A004"
d G "INT_EEPROM" 2 854 "0x00A010"
d G "INT_OSCF" 2 855 "0x00A080"
d G "INT_PWMTB" 2 856 "0x00A310"
d G "INT_IC3DR" 2 857 "0x00A308"
d G "INT_IC2QEI" 2 858 "0x00A304"
d G "INT_IC1" 2 859 "0x00A302"
d G "INT_TIMER5" 2 860 "0x00A301"
F G "main" 0 4 "void()" `659 
C L "main" 0 5 1 "FUNCTION"
C L "main" 0 5 2 "FUNCTION"
C L "main" 0 5 1 "FUNCTION"
C L "main" 0 5 1 "FUNCTION"
C L "main" 0 5 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 3 0
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 4
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer_5" 1 0
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "setup_ccp1" 1 0
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_power_pwm" 7 0
F B "set_power_pwm0_duty" 1 0
F B "set_power_pwm2_duty" 1 0
F B "set_power_pwm4_duty" 1 0
F B "set_power_pwm6_duty" 1 0
F B "set_power_pwm_override" 3 0
F B "setup_power_pwm_pins" 4 0
F B "setup_power_pwm_faults" 1 0
F B "setup_low_volt_detect" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_qei" 1 3
F B "qei_set_count" 1 0
F B "qei_get_count" 0 1
F B "qei_status" 0 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
